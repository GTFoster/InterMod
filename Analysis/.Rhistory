ylim=c(-3,3),
ylab='Population growth rate',
xlab='Generation', xaxt='n')
axis(1, at=1:4, labels=1:4)
lines(x=0:4, y=c(1, gtest2), type='b', col=colz[2], pch=16)
lines(x=0:4, y=c(1, gtest3), type='b', col=colz[3], pch=16)
lines(x=0:4, y=c(1, gtest4), type='b', col=colz[4], pch=16)
lines(x=0:4, y=c(1, gtest5), type='b', col=colz[5], pch=16)
lines(x=0:4, y=c(1, gtest6), type='b', col=colz[6], pch=16)
abline(h=0, lwd=2, col='grey')
#dev.off()
points(x=grDat2$gen,y=grDat2$mn, pch=16)
#pdf('simGrowthRate.pdf', height=4, width=4.5)
par(mar=c(4,4,0.5,0.5))
plot(x=0:4, y=c(1,gtest1), type='b',  col=colz[1], pch=16,
xlim=c(0,4),
ylim=c(-3,3),
ylab='Population growth rate',
xlab='Generation', xaxt='n')
axis(1, at=1:4, labels=1:4)
lines(x=0:4, y=c(1, gtest2), type='b', col=colz[2], pch=16)
lines(x=0:4, y=c(1, gtest3), type='b', col=colz[3], pch=16)
lines(x=0:4, y=c(1, gtest4), type='b', col=colz[4], pch=16)
lines(x=0:4, y=c(1, gtest5), type='b', col=colz[5], pch=16)
lines(x=0:4, y=c(1, gtest6), type='b', col=colz[6], pch=16)
abline(h=0, lwd=2, col='grey')
#dev.off()
points(x=grDat2$gen-1,y=grDat2$mn, pch=16)
out
grDat2$R2
grDat2
grDat2$est <- c(gtest1, gtest2, gtest3, gtest4, gtest5, gtest6)
grDat2$R2 <- (grDat2$mn-grDat2$est)^2
grDat2
set <- dplyr::filter(grDat2, trt!="W:0-")
View(set)
out <- data.frame(a=NA, b=NA, R2=NA)
for(a in seq(0,10, by=0.05)){
for(b in seq(0,10,by=0.1)){
test1 <- getPopDynamics(n=0.5, a=a, b=b, habVec=c(100, 0,0,0,0), times=5)
test2 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(80, 0,0,0,0), times=5)
test3 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(60, 0,0,0,0), times=5)
test4 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(40, 0,0,0,0), times=5)
test5 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(20, 0,0,0,0), times=5)
test6 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(0,0,0,0,0), times=5)
gtest1 <- getGrowthRate(test1$nt)
gtest2 <- getGrowthRate(test2$nt)
gtest3 <- getGrowthRate(test3$nt)
gtest4 <- getGrowthRate(test4$nt)
gtest5 <- getGrowthRate(test5$nt)
gtest6 <- getGrowthRate(test6$nt)
grDat2$id <- c(rep(1,4),rep(2,4),rep(3,4),rep(4,4),rep(5,4),rep(6,4))
grDat2$est <- c(gtest1, gtest2, gtest3, gtest4, gtest5, gtest6)
grDat2$R2 <- (grDat2$mn-grDat2$est)^2
set <- dplyr::filter(grDat2, trt!="W:0-")
temp <-data.frame(a=a, b=b, R2=sum(grDat2$R2, na.rm=T))
out <- rbind(out, temp)
}
}
out %>% ggplot(., aes(x=a,y=b,fill=R2))+
geom_tile()+
scale_fill_continuous(type = "viridis")
out <- data.frame(a=NA, b=NA, R2=NA)
for(a in seq(0,50, by=0.1)){
for(b in seq(0,10,by=0.1)){
test1 <- getPopDynamics(n=0.5, a=a, b=b, habVec=c(100, 0,0,0,0), times=5)
test2 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(80, 0,0,0,0), times=5)
test3 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(60, 0,0,0,0), times=5)
test4 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(40, 0,0,0,0), times=5)
test5 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(20, 0,0,0,0), times=5)
test6 <- getPopDynamics(n=0.5, a=a, b=b,  habVec=c(0,0,0,0,0), times=5)
gtest1 <- getGrowthRate(test1$nt)
gtest2 <- getGrowthRate(test2$nt)
gtest3 <- getGrowthRate(test3$nt)
gtest4 <- getGrowthRate(test4$nt)
gtest5 <- getGrowthRate(test5$nt)
gtest6 <- getGrowthRate(test6$nt)
grDat2$id <- c(rep(1,4),rep(2,4),rep(3,4),rep(4,4),rep(5,4),rep(6,4))
grDat2$est <- c(gtest1, gtest2, gtest3, gtest4, gtest5, gtest6)
grDat2$R2 <- (grDat2$mn-grDat2$est)^2
set <- dplyr::filter(grDat2, trt!="W:0-")
temp <-data.frame(a=a, b=b, R2=sum(grDat2$R2, na.rm=T))
out <- rbind(out, temp)
}
}
#pdf(file="intialsearch.pdf")
out %>% ggplot(., aes(x=a,y=b,fill=R2))+
geom_tile()+
scale_fill_continuous(type = "viridis")
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(geometry)
library(sp)
library(igraph)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(rgbif)
library(curl)
library(BIEN)
library(maps)
library(sf)
sf_use_s2(FALSE)
library(terra)
library(maps)
library(data.table)
library(geodata)
#library(rangeBuilder) #For creating alpha hulls #Edit: This is a good approach, but takes way too long.
library(alphahull)
#Erase later-only for debugging
library(tictoc)
library(exactextractr)
library(geosphere)
library(hypervolume)
load("data/MetaWebCentrality.Rda") #Load in Global Metaweb
metaCent$biennm <- gsub(pattern=" ", replacement="_",   metaCent$node) #Make name convention same a bien
Clima <- geodata::worldclim_global("worldclim", var="bio", res=5) #Load in global climate data (just as a mask)
wadmin <- geodata::world(resolution = 5, level =0, path="data/climate") #Download world administrative boundaries
ccs <- geodata::country_codes() #get country codes-includes continent key
wadminrast <- terra::rasterize(wadmin, Clima, field="GID_0") #rasterize so it's faster to join
fls <- list.files(path="data/GBIF/occs/") #Grab all the filenames in our occurence data dir
nms <- gsub("_", " ", fls) %>% gsub(".csv", "", .) #Refit to match data
nms <- paste(toupper(substr(nms, 1,1)), substr(nms,2,100), sep="")
#missing <- metaCent[metaCent$node %in% nms==FALSE,] #Extract those that aren't in our dat
dat <- metaCent[metaCent$node %in% nms==TRUE,] #Nodes which occur in our dataset
dat$flnm <- paste(gsub(" ", "_", tolower(dat$node)),".csv", sep="") #add the filenames of their occ points
temp <- dat[595,]
filtemp <- paste("data/GBIF/occs/", temp$flnm, sep="") #set up temp filename
tempdat <- read.csv(file=filtemp) #read in file
tempdat$cells <- terra::cellFromXY(Clima, xy=tempdat[,5:4]) #Grab the cell ids
indcells <- tempdat %>% dplyr::group_by(., cells) %>% dplyr::slice_sample(n = 1) #remove redundant cells (randomly choose 1 point)
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0 #grab country ID
indcells <- ccs %>% dplyr::select(., ISO3, continent) %>% left_join(indcells, ., by=c("ISO3")) #Grab continent
points <- dplyr::filter(indcells, continent=="South America")
#' @points A dataframe with lat-long points in the 5th and 4th column, respectively
#' @threshold quantile value for the amount of data points to remove, starting with those farthest from the centroid first.
#'
#' @output a spatial polygon of MCH
#'
# Function to calculate the convex hull area
cut_alphahull <- function(points, threshold=.95) {
hull.pol<-chull(points[,5:4]) #Calculate alpha-hull for full data
coords <- points[c(hull.pol, hull.pol[1]), ]
PolOur <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords[,5:4])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
center <- sf::st_centroid(PolOur)
ptsob <- sf::st_as_sf(points[,5:4], coords=c("decimalLongitude", "decimalLatitude"), crs=crs(PolOur))
dists <- sf::st_distance(center, ptsob)
under <- dists<quantile(dists,threshold)
cut <- points[under[1,]==TRUE,]
hull.pol2<-chull(cut[,5:4]) #Calculate alpha-hull for full data
coords2 <- cut[c(hull.pol2, hull.pol2[1]), ]
PolOur2 <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords2[,5:4])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
return(PolOur2)
}
maps::map('world', fill = TRUE, col = "white")
plot(cut_alphahull(points=points, threshold=0.99), col="red", add=T, alpha=0.5)
plot(cut_alphahull(points=points, threshold=0.7), col = "blue", add=T)
output <- cut_alphahull(points=points, threshold=0.95)
area <- st_area(output)
units(area)$numerator <- c("km", "km") # Get Niche Area
load(file="data/climate/env.RData")
points$envCell <- terra::cellFromXY(env, xy=as.matrix(points[,5:4]))
indcells_env <- points %>% dplyr::group_by(., envCell) %>% dplyr::slice_sample(n = 1) #remove redundant cells (randomly choose 1 point)
vals <- terra::extract(env, as.matrix(indcells_env[,5:4]))
indcells_env <- cbind(indcells_env, vals)
cut_alphahull_env <- function(input, threshold=.95) {
input <- input[is.finite(input$fpcat.PC1)==T,]
hull.pol<-chull(input[,10:11]) #Calculate alpha-hull for full data
coords <- input[c(hull.pol, hull.pol[1]), ]
PolOur <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords[,10:11])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
center <- sf::st_centroid(PolOur)
ptsob <- sf::st_as_sf(input[,10:11], coords=c("fpcat.PC1", "fpcat.PC2"), crs=crs(PolOur))
dists <- sf::st_distance(center, ptsob)
under <- dists<quantile(dists,threshold)
cut <- input[under[1,]==TRUE,]
hull.pol2<-chull(cut[,10:11]) #Calculate alpha-hull for the cut down data
coords2 <- cut[c(hull.pol2, hull.pol2[1]), ]
PolOur2 <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords2[,10:11])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
return(PolOur2)
}
samples <- sample(1:nrow(env.df), 10000, replace=F)
plot(x=env.df$fpcat.PC1[samples], y=env.df$fpcat.PC2[samples], col="grey", xlab="PC1", ylab="PC2")
#plot(cut_alphahull_env(input), col="blue", add=T)
#points(x=input$fpcat.PC1, y=input$fpcat.PC2, col="red")
#EnvOutput <- cut_alphahull_env(input=input, threshold=0.95)
#area <- st_area(EnvOutput)
#units(area)$numerator <- c("km", "km") # Get Niche Area
makefuncs <- function(){
library(geometry)
library(sp)
library(igraph)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(rgbif)
library(curl)
library(BIEN)
library(maps)
library(sf)
sf_use_s2(FALSE)
library(terra)
library(maps)
library(data.table)
library(geodata)
#library(rangeBuilder) #For creating alpha hulls #Edit: This is a good approach, but takes way too long.
#library(alphahull)
#Erase later-only for debugging
library(tictoc)
library(exactextractr)
library(geosphere)
library(hypervolume)
Clima <- unwrap(packed_Clima)
#' @points A dataframe with lat-long points in the 5th and 4th column, respectively
#' @threshold quantile value for the amount of data points to remove, starting with those farthest from the centroid first.
#'
#' @output a spatial polygon of MCH
#'
# Function to calculate the convex hull area
cut_alphahull <- function(points, threshold=.95) {
hull.pol<-chull(points[,5:4]) #Calculate alpha-hull for full data
coords <- points[c(hull.pol, hull.pol[1]), ]
PolOur <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords[,5:4])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
center <- sf::st_centroid(PolOur)
ptsob <- sf::st_as_sf(points[,5:4], coords=c("decimalLongitude", "decimalLatitude"), crs=crs(PolOur))
dists <- sf::st_distance(center, ptsob)
under <- dists<quantile(dists,threshold)
cut <- points[under[1,]==TRUE,]
hull.pol2<-chull(cut[,5:4]) #Calculate alpha-hull for full data
coords2 <- cut[c(hull.pol2, hull.pol2[1]), ]
PolOur2 <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords2[,5:4])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
return(PolOur2)
}
#' @points A dataframe with lat-long points in the 10 and 11th columns, respectively
#' @threshold quantile value for the amount of data points to remove, starting with those farthest from the centroid first.
#'
#' @output a spatial polygon of MCH
#'
# Function to calculate the convex hull area
cut_alphahull_env <- function(input, threshold=.95) {
input <- input[is.finite(input$fpcat.PC1)==T,]
hull.pol<-chull(input[,10:11]) #Calculate alpha-hull for full data
coords <- input[c(hull.pol, hull.pol[1]), ]
PolOur <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords[,10:11])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
center <- sf::st_centroid(PolOur)
ptsob <- sf::st_as_sf(input[,10:11], coords=c("fpcat.PC1", "fpcat.PC2"), crs=crs(PolOur))
dists <- sf::st_distance(center, ptsob)
under <- dists<quantile(dists,threshold)
cut <- input[under[1,]==TRUE,]
hull.pol2<-chull(cut[,10:11]) #Calculate alpha-hull for the cut down data
coords2 <- cut[c(hull.pol2, hull.pol2[1]), ]
PolOur2 <- sf::st_as_sf(SpatialPolygons(list(Polygons(list(Polygon(coords2[,10:11])), ID=1)), proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs')))
return(PolOur2)
}
}
filtemp <- paste("data/GBIF/occs/",x , sep="") #set up temp filename
x <- dat$flnm[1]
filtemp <- paste("data/GBIF/occs/",x , sep="") #set up temp filename
filtemp <- paste("data/GBIF/occs/",x , sep="") #set up temp filename
tempdat <- read.csv(filtemp)
tempdat
View(tempdat)
tempdat <- rbind(tempdat, data.frame(genus=NA, species=NA, scientificName=NA,decimalLatitude=NA,decimalLongitude=NA))
tempdat$cells <- terra::cellFromXY(Clima, xy=tempdat[,5:4]) #Grab the cell ids
tempdat$envCell <- terra::cellFromXY(env, xy=as.matrix(tempdat[,5:4])) #Grab cell ids from env data
indcells <- tempdat %>% dplyr::group_by(., cells, envCell) %>% dplyr::slice_sample(n = 1) #remove redundant cells (randomly choose 1 point)
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0 #grab country ID
indcells$ISO3
indcells
indcells
wadminrast <- unwrap(packed_wadminrast)
wadminrast[indcells$cells]
wadminrast
wadminrast[indcells$cells]$GID_0
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0 #grab country ID
text <- indcells[,1:100]
text <- indcells[1:100,]
text$ISO3 <- wadminrast[text$cells]$GID_0 #grab country ID
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0 #grab country ID
na.omit(tempdat)
tempdat <- na.omit(tempdat)
tempdat
tempdat <- rbind(tempdat, data.frame(genus=NA, species=NA, scientificName=NA,decimalLatitude=NA,decimalLongitude=NA))
tempdat <- rbind(tempdat, data.frame(genus=NA, species=NA, scientificName=NA,decimalLatitude=NA,decimalLongitude=NA))
tempdat
envhull <- cut_alphahull_env(temp, threshold = .95)
envArea <- sf::st_area(envhull)
View(wadmin)
cut_alphahull(temp)
temp
temp <- dplyr::filter(indcells, continent==cont)
try(cut_alphahull(temp))
x <- try(cut_alphahull(temp))
class(x)
1923/60
knitr::opts_chunk$set(echo = TRUE)
smod <- terra::rast('data/ghsl_data/BuiltData/ghsl-population-built-up-estimates-degree-urban-smod_smod-30ss-2015.tif')
plot(smod)
plot(smod)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(rmangal)
#"Urbanization index
smod <- terra::rast('data/ghsl_data/BuiltData/ghsl-population-built-up-estimates-degree-urban-smod_smod-30ss-2015.tif')
plot(smod)
#"Built Envrionment"
#built <- terra::rast('data/ghsl_data/BuiltData/ghsl-population-built-up-estimates-degree-urban-smod_built-30ss-2014.tif')
#plot(built)
#Human Density
#popsz <- terra::rast('data/ghsl_data/BuiltData/ghsl-population-built-up-estimates-degree-urban-smod_pop-30ss-2015.tif')
#plot(popsz)
#hist(popsz)
smod[smod==10]
mgn <- rmangal::get_collection(mgs) #Query them to an object
mgs <- rmangal::search_datasets("pollinator") #Search for plant-pollinator data
mgn <- rmangal::get_collection(mgs) #Query them to an object
View(mgs)
geomtypes <- vector()
for(i in 1:324){
geomtypes[i] <- mgn[[i]]$network$geom_type
}
sites <- NULL
for(i in 1:324){
if(is.na(geomtypes[i])==F){
ret <- data.frame(network_id=mgn[[i]]$network$network_id, lon=mgn[[i]]$network$geom_lon[[1]], "lat"=mgn[[i]]$network$geom_lat[[1]], size=nrow(mgn[[i]]$nodes)) %>% dplyr::summarise(network_id=mean(network_id), lon=mean(lon), lat=mean(lat), size=mean(size))
sites <- rbind(sites, ret)
mgn[[10]]$nodes
}
}
library(tidyverse)
geomtypes <- vector()
for(i in 1:324){
geomtypes[i] <- mgn[[i]]$network$geom_type
}
sites <- NULL
for(i in 1:324){
if(is.na(geomtypes[i])==F){
ret <- data.frame(network_id=mgn[[i]]$network$network_id, lon=mgn[[i]]$network$geom_lon[[1]], "lat"=mgn[[i]]$network$geom_lat[[1]], size=nrow(mgn[[i]]$nodes)) %>% dplyr::summarise(network_id=mean(network_id), lon=mean(lon), lat=mean(lat), size=mean(size))
sites <- rbind(sites, ret)
mgn[[10]]$nodes
}
}
sites
geomtypes <- vector()
for(i in 1:324){
geomtypes[i] <- mgn[[i]]$network$geom_type
}
sites <- NULL
for(i in 1:324){
if(is.na(geomtypes[i])==F){
ret <- data.frame(network_id=mgn[[i]]$network$network_id, lon=mgn[[i]]$network$geom_lon[[1]], "lat"=mgn[[i]]$network$geom_lat[[1]], size=nrow(mgn[[i]]$nodes)) %>% dplyr::summarise(network_id=mean(network_id), lon=mean(lon), lat=mean(lat), size=mean(size))
sites <- rbind(sites, ret)
}
}
View(ret)
sites <- NULL
for(i in 1:324){
if(is.na(geomtypes[i])==F){ #Extract if geom_type is available
ret <- data.frame(network_id=mgn[[i]]$network$network_id, lon=mgn[[i]]$network$geom_lon[[1]], "lat"=mgn[[i]]$network$geom_lat[[1]], size=nrow(mgn[[i]]$nodes)) %>% dplyr::summarise(network_id=mean(network_id), lon=mean(lon), lat=mean(lat), size=mean(size)) #grab the coords and size
sites <- rbind(sites, ret)
}
}
View(sites)
View(sites)
sites
crs(smod)
sites
sf::st_point(x=sites[3:2,])
ites[3:2,]
sites[3:2,]
sf::st_point(x=sites[,3:2])
sites[,3:2]
sf::st_point(x=matrix(sites[,3:2]))
sf::st_point(x=as.numeric(sites[,3:2]))
as.numeric(sites[,3:2])
terra::cellFromXY(smod, sites[,3:2])
plot(terra::cellFromXY(smod, sites[,3:2]))
terra::cellFromXY(smod, sites[,3:2])
terra::cellFromXY(smod, sites[,2:3])
terra::cellFromXY(smod, sites[,2:3])
sites[,2:3]
v <- vect(data.frame(sites[,2:3]), geom=c("x", "y"))
v <- vect(data.frame(sites[,2:3]), geom=c("lon", "lat"))
plot(v)
plot(smod)
plot(v, col="red", add=T)
View(sites)
sites %>% dplyr::select(., lon, lat)
sites %>% dplyr::select(., lon, lat) %>% unique()
plot(smod)
plot(v, col="red", add=T)
sites %>% dplyr::select(., lon, lat) %>% unique() %>% vect(.,  geom=c("lon", "lat"))
v <- sites %>% dplyr::select(., lon, lat) %>% unique() %>% vect(.,  geom=c("lon", "lat"))
plot(v, col="red", add=T)
plot(v, col="red", add=F)
plot(v, col="red", add=T)
plot(smod)
plot(v, col="red", add=T)
View(mgn)
mgn[[1]][["dataset"]][["description"]]
?terra::buffer()
terra::buffer(2, v)
terra::buffer(v, 2)
plot(terra::buffer(v, 2))
plot(terra::buffer(v, 3))
siteSV <- sites %>% dplyr::select(., lon, lat) %>% unique() %>% vect(.,  geom=c("lon", "lat"))
crs(smod)
terra::cellFromXY(smod, sites[,2:3])
v <- vect(data.frame(sites[,2:3]), geom=c("lon", "lat"))
plot(terra::buffer(v, 3))
plot(v, col="red", add=T)
siteSV <- sites %>% dplyr::select(., lon, lat) %>% unique() %>% vect(.,  geom=c("lon", "lat"))
siteBuffer <- terra::buffer(v, 3)
siteBuffer
msk <- terra::mask(smod,siteBuffer)
crs(siteBuffer)
crs(siteBuffer) <- crs(smod)
msk <- terra::mask(smod,siteBuffer)
plot(msk)
msk[msk==10] <- 1
.75/2
1.25/2
.75/2
50*.75/2
50-18.75
1.25/2
50*1.25/2
knitr::opts_chunk$set(echo = TRUE)
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
knitr::opts_chunk$set(echo = TRUE)
options(java.parameters = "-Xmx20g") #Java Heap Space Limits for Maxent
library(raster)
library(tidyverse)
library(terra)
library(tidyterra)
library(ENMTML)
library(rgbif)
library(udunits2)
library(units)
library(sf)
library(stars)
library(rworldmap)
library(CoordinateCleaner)
library(dismo)
library(kernlab)
library(mgcv)
library(spatialEco)
library(dplyr)
library(rgbif)
library(rnaturalearth)
library(rJava)
sf_use_s2(FALSE) #Don't assume a sphericical geometry-therefore dist for buffer will be in units of degree
crul::set_opts(http_version = 2) #For getting gbif queries to work: https://github.com/ropensci/crul/issues/174#issuecomment-1600273273
Moulatlet <- read.csv(file="../Data/datalong_v08_06_2023_CLEANED.csv")
Moulatletval <- Moulatlet %>% dplyr::select(., Scientific, plant_id, interaction, lat, lon) %>% dplyr::filter(interaction %in% (c(0,1))) %>% dplyr::select(., Scientific, plant_id, interaction, lat, lon) %>% dplyr::rename(., Latitude=lat, Longitude=lon, Frugivore_Species=Scientific, Plant_Species=plant_id) %>%
unique()
Moulatletval$interaction <- as.numeric(Moulatletval$interaction)
counts <- Moulatletval %>% dplyr::mutate(., speciesPair=paste(Frugivore_Species, Plant_Species, sep="-")) %>%
group_by(., speciesPair) %>%
dplyr::summarise(., pos=sum(interaction), tot=n(), neg=tot-pos)
counts <- Moulatletval %>% dplyr::mutate(., speciesPair=paste(Frugivore_Species, Plant_Species, sep="-")) %>% dplyr::select(., speciesPair ) %>% left_join(counts, .) %>% unique()
counts$prop <- counts$pos/counts$tot
#pdf(file="Figures/MoulatletInterSummary.pdf")
counts %>% dplyr::filter(., tot>9) %>%
ggplot(., aes(x=tot, y=prop))+geom_point(position = "jitter")+theme_classic()+ylab("Proportion of Interactions given Coocurence")+xlab("Number of Coocurrences")+ annotate("text", x = 31, y = .25, label = "211 interactions total")+ annotate("text", x = 31, y = .2, label = "44 birds, 37 plants")
#dev.off()
usable <- counts %>% dplyr::filter(., tot>4) %>% unique()#Number of interactions with at least 10 records
table(usable$ID)
Moulatletval <- Moulatletval %>% dplyr::mutate(., speciesPair=paste(Frugivore_Species, Plant_Species, sep="-"))
usable <- left_join(usable, Moulatletval, by="speciesPair") %>% unique()
length(unique(usable$Frugivore_Species))
length(unique(usable$Plant_Species))
library(rnaturalearth)
library(rnaturalearthdata)
world <- ne_countries(scale = "medium", returnclass = "sf")
usable$Latitude <- as.numeric(usable$Latitude)
usable$Longitude <- as.numeric(usable$Longitude)
#pdf(file="Figures/MoulatletMap_10occ.pdf", width=11, height=8.5)
#pdf(file="Figures/spatialextent.pdf")
ggplot(data = world) +
geom_sf()+theme_classic()+ usable %>% group_by(., speciesPair) %>% slice_sample(n=1) %>%
geom_point(data=., aes(x=Longitude, y=Latitude, col=prop), size=1.25)+scale_color_gradient(low = "firebrick", high="dodgerblue")
dev.off()
length(unique(usable$speciesPair))
amPol2 <- amPol %>% dplyr::select(., species1, species2, interaction, latitude, longitude) %>% unique()
amPol2 <- amPol %>% dplyr::select(., species1, species2, interaction, latitude, longitude) %>% unique()
knitr::opts_chunk$set(echo = TRUE)
interlist <- unique(testpoints$speciesPair)
load(file="data/TestPoints.Rda")
View(testpoints)
realtest
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
View(Moulatlet)
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
dat <- read.csv(file="data/FrugivoreMetaweb.csv") #load in entire interaction set (subset of Moulatlet)
frugMweb <- dat %>% dplyr::select(., -Latitude, -Longitude) %>% unique() #Remove redundancies across location - CHANGE THIS IS YOU CARE ABOUT EDGE WEIGHTS
plants <- unique(frugMweb$Plant_Species)
sp
dat
knitr::opts_chunk$set(echo = TRUE)
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
sp <- unlist(read.csv(file="data/speciestoQuery.csv")) #Read in our species names to query
dat <- read.csv(file="data/FrugivoreMetaweb.csv") #load in entire interaction set (subset of Moulatlet)
frugMweb <- dat %>% dplyr::select(., -Latitude, -Longitude) %>% unique() #Remove redundancies across location - CHANGE THIS IS YOU CARE ABOUT EDGE WEIGHTS
plants <- unique(frugMweb$Plant_Species)
dat
View(dat)
plants <- unique(frugMweb$Plant_Species)
plants
c <- BIEN::BIEN_trait_mean(plants[1:2], trait = "diameter at breast height (1.3 m)")
